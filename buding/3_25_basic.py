#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
File        : 3_25_basic.py
Author      : Sean Zhang <siyang.zhang1997@outlook.com>
Date        : 2025-04-09
Description : 
    basic_1 
        - 梯度下降
    basic_2
        - 线性回归 y = kx + b
"""

import numpy as np

# ============================================================================= 
# basic 1
# =============================================================================
def main1():
    # 为什么使用均分误差，而不直接使用绝对值，是因为求导麻烦，有地方不可导
    # x^2 = 3
    # predict = x^2
    # label = 3
    # loss = (predict - label) ^ 2 = (x^2 - 3) ^ 2
    # 对loss求x的偏导 = 2(x^2 - 3) * 2x
    # 求出来的值就是梯度，根据梯度去更新参数，若梯度为0，代表到达了一个局部最优
    # 需要学习率lr去控制更新参数的程度
    # lr > 1 --> 迈大步伐
    # lr < 1 --> 小步子
    
    epoch = 100
    x = 5           # 参数，此处不是输入数据
    label = 3       # 标签
    lr = 0.01
    
    for e in range(epoch):
        predict = x * x
        loss = (predict - label) ** 2               # 用来可视化差距，求偏导的时候会对这个式子求参数的偏导
        delta_x = 2 * (predict - label) * 2 * x     # 对loss求偏导
        x = x - delta_x * lr                        # 更新参数

    print(x)
    
    # 参数的初始值对训练有影响，学习率是最影响学习的参数
    # 预训练模型时一般不超过10^-3，一般是0.00001，因为预训练模型已经有很多信息了，所以每次只学一点

def main2():
    # (x1 - 3)^2 + (x2 + 4)^2 = 0
    # 注意：这里x1和x2是参数，不是输入数据，所以标签是 0，因为我们要求的是x1和x2，它们的目标值是 0
    label = 0
    
    # 初始化参数
    x1 = 3
    x2 = -3
    
    lr = 0.001
    epoch = 1000
    
    for e in range(epoch):
        predict = (x1 - 3) ** 2 + (x2 + 4) ** 2
        loss = (predict - label) ** 2
        delta_x1 = 2 * (predict - label) * 2 * (x1 - 3)
        delta_x2 = 2 * (predict - label) * 2 * (x2 + 4)
        
        x1 -= delta_x1 * lr
        x2 -= delta_x2 * lr
        
        if (e % 100):
            print(x1, x2, loss)

# ============================================================================= 
# basic 2
# =============================================================================

def main3():
    # y = kx + b
    # ------------------- 数据获取 -------------------
    xs = [i for i in range(2000, 2023)]
    ys = [5000, 8000, 12000, 15000, 14000, 18000, 20000, 25000, 26000, 32000, 40000, 42000, 46000, 50000, 51000, 53000, 53000, 54000, 57000, 58000, 59000, 59900, 60000]
    
    # ------------------- 数据处理 -------------------
    
    # ------------------- 参数定义 -------------------
    k = 1
    b = 0
    lr = 0.0001
    epoch = 20
    
    # ------------------- 模型训练 -------------------
    for e in range(epoch):
        for x, y in zip(xs, ys):
            # ------------------- 求预测值（模型预测、模型推理）-------------------
            predict = k * x + b
            # 求解loss
            # loss = (predict - y) ** 2
            
            # 计算梯度值
            delta_k = 2 * (predict - y) * x
            delta_b = 2 * (predict - y) * 1
            
            k = k - delta_k * lr
            b = b - delta_b * lr
    print("k:", k)
    print("b:", b)
    # ------------------- 模型上线 -------------------        
    input_x = input("请输入年份：")
    p = k * int(input_x) + b
    print(f"{input_x}年的房价为：{p}")



if __name__ == "__main__":
    # main1()
    # main2()
    
    # 线性回归
    main3()